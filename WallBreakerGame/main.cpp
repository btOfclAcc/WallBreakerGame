#include "raylib.h"
#include "WallBreaker.h"

/*
1- Include deltaTime in all speed, movement calculations to make sure
consistent speed is applied across devices

working



2- Develop a CircleToRoundRectangleCollision to detect the collision that happens
with the corners of the bricks

CircleToRoundRectangleCollision outputs where the collision occured, ID as below:
		  1 | 5 | 2
		  --|---|--
		  6 |   | 6
		  --|---|--
		  3 | 5 | 4



3- Depending on where the collision happens with the bricks, come up with a direction
that will affect the x and y of the ball's speed

	1, 2, 3, 4 are treated as 45 degree edges
	implementation for bricks successful
	implementation for player unsuccessful, changes reverted



4- Include an unlimited number of levels that are created procedurally.
Each time you spawn the game, a new layout should be displayed

levels are procedurally generated by poking holes randomly on the full grid



5- Have pickups such as life that fall from certain bricks upon impact.
Collecting them by the player, will activate the reward.

health power up gives one life back, cannot exceed 5 life



6- Include a cheat. Such as a pickup that temporarily (for instance for the next 5 seconds)
[with a time feedback for the user] eliminates the reversal of speed upon impact with bricks.

charged power up that goes through bricks for 5 sec



7- Bonus -> Include sound effects

audio played when brick breaks



8- Bonus -> Find a way to put the game on your phone

not implimented

12/15
*/

int main()
{
	WallBreaker game;
	game.Main();



	return 0;
}